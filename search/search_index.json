{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"User Guide","text":"<p>**</p> <p>**# data-utils</p> <p>rename to something... cabinet</p> <p>all sub-folders will be suffixed with \"_drawer\" </p> <p>TODO: switch to mkdocs, boo sphinx </p> <p>:)</p> <p>metamap TOS: https://lhncbc.nlm.nih.gov/ii/tools/MetaMap/run-locally/Ts_and_Cs.html</p> <p>does metamap have a \"validated/authorized\" endpoint?</p> <p>windows install: https://lhncbc.nlm.nih.gov/ii/tools/MetaMap/Docs/README_win32.html</p> <p>Times for metamap vs scispacy...</p> <p></p> <p></p> <p>These are \"straight up\" and do not involve parallelization, in that regard:</p> <ul> <li>metmap benefits about 4x improvement from IO thread-based multiprocessing</li> <li>scispacy can utilize batch processing link and can benefit even further from CPU (cpus go zoom) parallelization in with batch processing and limiting pipeline models</li> <li>HOWEVER</li> <li>a fastapi endpoint (based on internet search) can easily serve about 200req/s which is faster than scispacy model of about 100it/s</li> <li>so ok to use endpoint</li> <li> <p>we can further unlock this using websockets</p> </li> <li> <p>ner endpoint that does the SNOMED traversal</p> </li> <li>something like... `post_ner(text: str, terminal_tree_node: str -&gt; cui) ?</li> </ul> <p>future work will turn this into a rust/python package using pyo3 and maturin... this isn't necessary for current system calls and may benefit network calls but will mostly be required for parsing the snomed source files when we support providing your own instead of just (implying we keep current functionality as well) the id-based maps</p> <p>this will also be supported by rust libraries such as mmi-parser to parse out mmi output from the rest api</p>"},{"location":"api_reference/","title":"Getting Started","text":"<p>This is where you can find source code documentation, examples, and more technical details.</p> <p>Our cabinet of tools.</p> Highlights <ul> <li>Local MetaMap operations</li> <li>SciSpacy NER via API</li> <li>SNOMED tree traversal</li> <li>UMLS CUI to SNOMED CUI</li> <li>Common data normalization tasks</li> </ul> <p>In general, we try to expose the high-level functionality of these tools at the top level of their corresponding \"drawers\" (e.g. <code>cabinet.umls_drawer</code>).</p> <p>This way you can import a drawer and use its functionality specifically.</p> <p>For example:</p> <pre><code>from cabinet import umls_drawer\numls_drawer.post_ner_single(\"I have a headache.\")\n</code></pre> <p>If you want more granular control/exposure, check out the underscore methods  inside the drawers although this is not recommended practice.</p>"},{"location":"api_reference/cleaning_drawer/","title":"Cleaning Drawer","text":"<p>This drawer exists for cleaning functions.</p> <p>It's a bit of a catch-all for functions that don't fit in any other drawer.</p> <p>This module contains code for typical data normalization tasks.</p> <p>We generally enforce 'type-saftey' by using pydantic's validate_arguments decorator and other pydantic types.</p>"},{"location":"api_reference/cleaning_drawer/#cabinet.cleaning_drawer.normalize.categorize_age","title":"<code>categorize_age(age)</code>","text":"<p>Categorize an age into a string.</p> <p>Parameters:</p> Name Type Description Default <code>age</code> <code>PositiveInt</code> <p>Age to categorize. Must be a positive integer.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Categorized age.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; categorize_age(10)\n'&lt;18'\n&gt;&gt;&gt; categorize_age(18)\n'18-25'\n&gt;&gt;&gt; # a general example using pandas\n&gt;&gt;&gt; df['age'].apply(categorize_age)\npandas.Series(['&lt;18', '18-25', '26-35', '36-45', '46-55', '56-65', '65+'])\n</code></pre> Source code in <code>src/cabinet/cleaning_drawer/normalize.py</code> <pre><code>@validate_arguments\ndef categorize_age(age: PositiveInt) -&gt; str:\n\"\"\"Categorize an age into a string.\n\n    Args:\n        age (PositiveInt): Age to categorize. Must be a positive integer.\n\n    Returns:\n        str: Categorized age.\n\n    Examples:\n        &gt;&gt;&gt; categorize_age(10)\n        '&lt;18'\n        &gt;&gt;&gt; categorize_age(18)\n        '18-25'\n        &gt;&gt;&gt; # a general example using pandas\n        &gt;&gt;&gt; df['age'].apply(categorize_age)\n        pandas.Series(['&lt;18', '18-25', '26-35', '36-45', '46-55', '56-65', '65+'])\n    \"\"\"\n    if age &lt; 18:\n        return \"&lt;18\"\n    elif age &lt;= 25:\n        return \"18-25\"\n    elif age &lt;= 35:\n        return \"26-35\"\n    elif age &lt;= 45:\n        return \"36-45\"\n    elif age &lt;= 55:\n        return \"46-55\"\n    elif age &lt;= 65:\n        return \"56-65\"\n    else:\n        return \"&gt;65\"\n</code></pre>"},{"location":"api_reference/umls_drawer/","title":"UMLS Drawer","text":"<p>This drawer is for UMLS related activities.</p> <p>The <code>scispacy_ner</code> module gives you access to the scispacy biomedical NER model via our API.</p> <p>The <code>metamap_ner</code> module interacts with the MetaMap NLP tool to extract structured information from biomedical text and requires you to have MetaMap installed locally.</p> <p>The <code>knowledge_base</code> module allows you to interact with the UMLS knowledge base data at a high level and mostly focuses on SNOMED CT concepts. Further work on this module may take  advantage of the entire UMLS, but require a locally downloaded copy due to licensing restrictions.</p> <p>In general, we recommend using the <code>scispacy_ner</code> module for NER tasks and the <code>knowledge_base</code> module for knowledge base related tasks unless you specifically need the power of MetaMap.</p> <p>The <code>post_ner</code> methods exposed here utilize the API to perform NER on your text.</p> <p>This module contains functions for interacting with the scispacy NER model via our API.</p> <p>The private functions utilize async/await syntax and are used by the public functions which are synchronous.  The public functions are the ones that you should use in your code unless you are confident that you know what you are doing. </p> <p>The core type of this module is <code>NEROutput</code> which is a pydantic model that represents the output from the scispacy NER model. All public functions return either an instance of this class or an iterator of instances of this class attached to an index (tuple[int, NEROutput])  for the index of the text that was submitted... this helps with link to original data.</p> <p><code>web_socket_ner</code>, specifically, returns an iterator and thus needs to be consumed to be used:</p> <pre><code>&gt;&gt;&gt; from cabinet.umls_drawer.scispacy import web_socket_ner\n&gt;&gt;&gt; for text_index, ner_output in web_socket_ner(texts=[\"cocaine\", \"heroin\", \"cociane\"]):\n...     print(text_index, ner_output)\n0 cui='12' concept_name='test' concept_definition='test22' entity='{\"text\":\"cocaine\"}' score=1.0\n1 cui='12' concept_name='test' concept_definition='test22' entity='{\"text\":\"heroin\"}' score=1.0\n2 cui='12' concept_name='test' concept_definition='test22' entity='{\"text\":\"cociane\"}' score=1.0\n</code></pre>"},{"location":"api_reference/umls_drawer/#cabinet.umls_drawer.scispacy_ner.NEROutput","title":"<code>NEROutput</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Output from the (scispacy) NER model.</p> <p>This class is keyword only so you must pass in the arguments as: <code>cui=\"C0004096\", concept_name=\"Acetaminophen\", ...</code></p> <p>Args/Attributes:     cui (str): The UMLS CUI.     entity (str): The entity that matched a UMLS concept from the source text.     score (float): The score of the match.</p> <p>Examples:</p> <p>An example of manually creating this class:</p> <pre><code>&gt;&gt;&gt; from cabinet.umls_drawer import NEROutput\n&gt;&gt;&gt; NEROutput(\n...     cui=\"C0004096\",\n...     entity=\"acetaminophen\",\n...     score=0.96,\n... )\n</code></pre> <p>However, much more likely is that you get this class as a return type from one of the various functions in this module that make calls to our API.</p> <pre><code>&gt;&gt;&gt; from cabinet.umls_drawer import post_ner_single\n&gt;&gt;&gt; post_ner_single(text=\"cocaine\")\n[\n    0 cui='12' entity=\"cocaine\"} score=1.0\n]\n</code></pre> Source code in <code>src/cabinet/umls_drawer/scispacy_ner.py</code> <pre><code>class NEROutput(BaseModel):\n\"\"\"Output from the ([scispacy](https://github.com/allenai/scispacy/tree/4f9ba0931d216ddfb9a8f01334d76cfb662738ae)) NER model.\n\n    This class is keyword only so you must pass in the arguments as: `cui=\"C0004096\", concept_name=\"Acetaminophen\", ...`\n\n    Args/Attributes:\n        cui (str): The UMLS CUI.\n        entity (str): The entity that matched a UMLS concept from the source text.\n        score (float): The score of the match.\n\n    Examples:\n        An example of manually creating this class:\n        ```python\n        &gt;&gt;&gt; from cabinet.umls_drawer import NEROutput\n        &gt;&gt;&gt; NEROutput(\n        ...     cui=\"C0004096\",\n        ...     entity=\"acetaminophen\",\n        ...     score=0.96,\n        ... )\n        ```\n\n        However, much more likely is that you get this class as a return type from one of the various functions in this module that\n        make calls to our API.\n        ```python\n        &gt;&gt;&gt; from cabinet.umls_drawer import post_ner_single\n        &gt;&gt;&gt; post_ner_single(text=\"cocaine\")\n        [\n            0 cui='12' entity=\"cocaine\"} score=1.0\n        ]\n        ```\n\n    \"\"\"\n\n    cui: str\n\"\"\"The UMLS CUI.\"\"\"\n    entity: str\n\"\"\"The entity that matched a UMLS concept from the source text.\"\"\"\n    score: float\n\"\"\"The score of the match.\"\"\"\n</code></pre>"},{"location":"api_reference/umls_drawer/#cabinet.umls_drawer.scispacy_ner.NEROutput.cui","title":"<code>cui: str</code>  <code>class-attribute</code>","text":"<p>The UMLS CUI.</p>"},{"location":"api_reference/umls_drawer/#cabinet.umls_drawer.scispacy_ner.NEROutput.entity","title":"<code>entity: str</code>  <code>class-attribute</code>","text":"<p>The entity that matched a UMLS concept from the source text.</p>"},{"location":"api_reference/umls_drawer/#cabinet.umls_drawer.scispacy_ner.NEROutput.score","title":"<code>score: float</code>  <code>class-attribute</code>","text":"<p>The score of the match.</p>"},{"location":"api_reference/umls_drawer/#cabinet.umls_drawer.scispacy_ner.post_ner_many","title":"<code>post_ner_many(texts)</code>","text":"<p>Submit multiple text blobs to the scispacy NER model and return the results.</p> <p>Parameters:</p> Name Type Description Default <code>texts</code> <code>list[str]</code> <p>The texts to submit to the NER model.</p> required <p>Returns:</p> Type Description <code>list[tuple[int, NEROutput]]</code> <p>Iterator[tuple[int, NEROutput]]: The results from the NER model.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the response status is not 200.</p> Example <p>```python</p> <p>from cabinet.umls_drawer import post_ner_many post_ner_many(texts=[\"acetaminophen\", \"ibuprofen\"]) [     (0, NEROutput(         cui=\"C0004096\",         entity=\"acetaminophen\",         score=0.96,     )),     (1, NEROutput(         cui=\"C0004096\",         entity=\"ibuprofen\",         score=0.96,     )) ]</p> Source code in <code>src/cabinet/umls_drawer/scispacy_ner.py</code> <pre><code>@validate_arguments\ndef post_ner_many(\n    texts: list[str],\n) -&gt; list[tuple[int, NEROutput]]:\n\"\"\"Submit multiple text blobs to the scispacy NER model and return the results.\n\n    Args:\n        texts (list[str]): The texts to submit to the NER model.\n\n    Returns:\n        Iterator[tuple[int, NEROutput]]: The results from the NER model.\n\n    Raises:\n        Exception: If the response status is not 200.\n\n    Example:\n        ```python\n        &gt;&gt;&gt; from cabinet.umls_drawer import post_ner_many\n        &gt;&gt;&gt; post_ner_many(texts=[\"acetaminophen\", \"ibuprofen\"])\n        [\n            (0, NEROutput(\n                cui=\"C0004096\",\n                entity=\"acetaminophen\",\n                score=0.96,\n            )),\n            (1, NEROutput(\n                cui=\"C0004096\",\n                entity=\"ibuprofen\",\n                score=0.96,\n            ))\n        ]\n    \"\"\"\n    return asyncio.run(_post_ner_many(texts))\n</code></pre>"},{"location":"api_reference/umls_drawer/#cabinet.umls_drawer.scispacy_ner.post_ner_single","title":"<code>post_ner_single(text)</code>","text":"<p>Submit a single text blob to the scispacy NER model and return the results.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to submit to the NER model.</p> required <p>Returns:</p> Type Description <code>list[NEROutput]</code> <p>list[NEROutput]: The results from the NER model.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the response status is not 200.</p> Example <p>```python</p> <p>from cabinet.umls_drawer import post_ner_single post_ner_single(text=\"acetaminophen\") [     NEROutput(         cui=\"C0004096\",         entity=\"acetaminophen\",         score=0.96,     ) ]</p> Source code in <code>src/cabinet/umls_drawer/scispacy_ner.py</code> <pre><code>@validate_arguments\ndef post_ner_single(text: str) -&gt; list[NEROutput]:\n\"\"\"Submit a single text blob to the scispacy NER model and return the results.\n\n    Args:\n        text (str): The text to submit to the NER model.\n\n    Returns:\n        list[NEROutput]: The results from the NER model.\n\n    Raises:\n        Exception: If the response status is not 200.\n\n    Example:\n        ```python\n        &gt;&gt;&gt; from cabinet.umls_drawer import post_ner_single\n        &gt;&gt;&gt; post_ner_single(text=\"acetaminophen\")\n        [\n            NEROutput(\n                cui=\"C0004096\",\n                entity=\"acetaminophen\",\n                score=0.96,\n            )\n        ]\n    \"\"\"\n    return asyncio.run(_post_nlp_single(text))\n</code></pre>"},{"location":"api_reference/umls_drawer/#cabinet.umls_drawer.scispacy_ner.websocket_ner","title":"<code>websocket_ner(texts)</code>  <code>async</code>","text":"<p>Connect to the scispacy NER model websocket and submit texts.</p> <p>IMPORTANT: This function requires using the <code>async for</code> syntax and thus may not work in all scenarios or environments. It exists for very large datasets where the overhead of the HTTP request/response cycle is too much.</p> <p>Parameters:</p> Name Type Description Default <code>texts</code> <code>list[str]</code> <p>The texts to submit to the NER model.</p> required <p>Yields:</p> Type Description <code>AsyncIterator[tuple[int, NEROutput]]</code> <p>AsyncIterator[tuple[int, NEROutput]]: The results from the NER model.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the response status is not 200.</p> Example <p>```python</p> <p>from cabinet.umls_drawer import websocket_ner async for i, result in websocket_ner(texts=[\"acetaminophen\", \"ibuprofen\"]): ...     print(i, result) 0 cui='12' concept_name='test' entity=\"cocaine\" score=1.0 1 cui='12' concept_name='test' entity=\"heroin\" score=1.0 2 cui='12' concept_name='test' entity=\"cociane\" score=1.0</p> Source code in <code>src/cabinet/umls_drawer/scispacy_ner.py</code> <pre><code>@validate_arguments\nasync def websocket_ner(texts: list[str]) -&gt; AsyncIterator[tuple[int, NEROutput]]:\n\"\"\"Connect to the scispacy NER model websocket and submit texts.\n\n    *IMPORTANT*: This function requires using the `async for` syntax and thus may not work in all scenarios or environments.\n    It exists for **very** large datasets where the overhead of the HTTP request/response cycle is too much.\n\n    Args:\n        texts (list[str]): The texts to submit to the NER model.\n\n    Yields:\n        AsyncIterator[tuple[int, NEROutput]]: The results from the NER model.\n\n    Raises:\n        Exception: If the response status is not 200.\n\n    Example:\n        ```python\n        &gt;&gt;&gt; from cabinet.umls_drawer import websocket_ner\n        &gt;&gt;&gt; async for i, result in websocket_ner(texts=[\"acetaminophen\", \"ibuprofen\"]):\n        ...     print(i, result)\n        0 cui='12' concept_name='test' entity=\"cocaine\" score=1.0\n        1 cui='12' concept_name='test' entity=\"heroin\" score=1.0\n        2 cui='12' concept_name='test' entity=\"cociane\" score=1.0\n    \"\"\"\n    async with aiohttp.ClientSession(_WS_URL) as session:\n        async with session.ws_connect(\"/models/ner/ws\") as ws:\n            for i, text in tqdm_asyncio(enumerate(texts)):\n                await ws.send_bytes(orjson.dumps({\"text\": text}))\n                raw_data = await ws.receive_bytes()\n                response_data = orjson.loads(raw_data)\n                data = NEROutput(**response_data)\n                yield (i, data)\n</code></pre>"}]}